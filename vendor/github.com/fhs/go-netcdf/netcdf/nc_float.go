// Copyright 2014 The Go-NetCDF Authors. All rights reserved.
// Use of this source code is governed by the MIT
// license that can be found in the LICENSE file.

// These files are autogenerated from nc_double.go using generate.go
// DO NOT EDIT (except nc_double.go).

package netcdf

import (
	"fmt"
	"unsafe"
)

// #include <stdlib.h>
// #include <netcdf.h>
import "C"

// WriteFloat32s writes data as the entire data for variable v.
func (v Var) WriteFloat32s(data []float32) error {
	if err := okData(v, FLOAT, len(data)); err != nil {
		return err
	}
	return newError(C.nc_put_var_float(C.int(v.ds), C.int(v.id), (*C.float)(unsafe.Pointer(&data[0]))))
}

// ReadFloat32s reads the entire variable v into data, which must have enough
// space for all the values (i.e. len(data) must be at least v.Len()).
func (v Var) ReadFloat32s(data []float32) error {
	if err := okData(v, FLOAT, len(data)); err != nil {
		return err
	}
	return newError(C.nc_get_var_float(C.int(v.ds), C.int(v.id), (*C.float)(unsafe.Pointer(&data[0]))))
}

// WriteFloat32s sets the value of attribute a to val.
func (a Attr) WriteFloat32s(val []float32) error {
	// We don't need okData here because netcdf library doesn't know
	// the length or type of the attribute yet.
	cname := C.CString(a.name)
	defer C.free(unsafe.Pointer(cname))
	return newError(C.nc_put_att_float(C.int(a.v.ds), C.int(a.v.id), cname,
		C.nc_type(FLOAT), C.size_t(len(val)), (*C.float)(unsafe.Pointer(&val[0]))))
}

// ReadFloat32s reads the entire attribute value into val.
func (a Attr) ReadFloat32s(val []float32) (err error) {
	if err := okData(a, FLOAT, len(val)); err != nil {
		return err
	}
	cname := C.CString(a.name)
	defer C.free(unsafe.Pointer(cname))
	err = newError(C.nc_get_att_float(C.int(a.v.ds), C.int(a.v.id), cname,
		(*C.float)(unsafe.Pointer(&val[0]))))
	return
}

// ReadFloat32At returns a value via index position
func (v Var) ReadFloat32At(idx []uint64) (val float32, err error) {
	var dimPtr *C.size_t
	if len(idx) > 0 {
		dimPtr = (*C.size_t)(unsafe.Pointer(&idx[0]))
	}
	err = newError(C.nc_get_var1_float(C.int(v.ds), C.int(v.id),
		dimPtr, (*C.float)(unsafe.Pointer(&val))))
	return
}

// WriteFloat32At sets a value via its index position
func (v Var) WriteFloat32At(idx []uint64, val float32) (err error) {
	var dimPtr *C.size_t
	if len(idx) > 0 {
		dimPtr = (*C.size_t)(unsafe.Pointer(&idx[0]))
	}
	err = newError(C.nc_put_var1_float(C.int(v.ds), C.int(v.id),
		dimPtr, (*C.float)(unsafe.Pointer(&val))))
	return
}

// WriteFloat32Slice writes data as a slice of variable v. The slice is specified by start and count:
// https://www.unidata.ucar.edu/software/netcdf/docs/programming_notes.html#specify_hyperslab.
func (v Var) WriteFloat32Slice(data []float32, start, count []uint64) error {
	if err := okDataSlice(v, FLOAT, len(data), start, count); err != nil {
		return err
	}
	return newError(C.nc_put_vara_float(C.int(v.ds), C.int(v.id),
		(*C.size_t)(unsafe.Pointer(&start[0])),
		(*C.size_t)(unsafe.Pointer(&count[0])),
		(*C.float)(unsafe.Pointer(&data[0])),
	))
}

// ReadFloat32Slice reads a slice of variable v into data, which must have enough
// space for all the values. The slice is specified by start and count:
// https://www.unidata.ucar.edu/software/netcdf/docs/programming_notes.html#specify_hyperslab.
func (v Var) ReadFloat32Slice(data []float32, start, count []uint64) error {
	if err := okDataSlice(v, FLOAT, len(data), start, count); err != nil {
		return err
	}
	return newError(C.nc_get_vara_float(C.int(v.ds), C.int(v.id),
		(*C.size_t)(unsafe.Pointer(&start[0])),
		(*C.size_t)(unsafe.Pointer(&count[0])),
		(*C.float)(unsafe.Pointer(&data[0])),
	))
}

// WriteFloat32StridedSlice writes data as a slice of variable v. The slice is specified by start, count and stride:
// https://www.unidata.ucar.edu/software/netcdf/docs/programming_notes.html#specify_hyperslab.
func (v Var) WriteFloat32StridedSlice(data []float32, start, count []uint64, stride []int64) error {
	if err := okDataStride(v, FLOAT, len(data), start, count, stride); err != nil {
		return err
	}
	return newError(C.nc_put_vars_float(C.int(v.ds), C.int(v.id),
		(*C.size_t)(unsafe.Pointer(&start[0])),
		(*C.size_t)(unsafe.Pointer(&count[0])),
		(*C.ptrdiff_t)(unsafe.Pointer(&stride[0])),
		(*C.float)(unsafe.Pointer(&data[0])),
	))
}

// ReadFloat32StridedSlice reads a strided slice of variable v into data, which must have enough
// space for all the values. The slice is specified by start, count and stride:
// https://www.unidata.ucar.edu/software/netcdf/docs/programming_notes.html#specify_hyperslab.
func (v Var) ReadFloat32StridedSlice(data []float32, start, count []uint64, stride []int64) error {
	if err := okDataStride(v, FLOAT, len(data), start, count, stride); err != nil {
		return err
	}
	return newError(C.nc_get_vars_float(C.int(v.ds), C.int(v.id),
		(*C.size_t)(unsafe.Pointer(&start[0])),
		(*C.size_t)(unsafe.Pointer(&count[0])),
		(*C.ptrdiff_t)(unsafe.Pointer(&stride[0])),
		(*C.float)(unsafe.Pointer(&data[0])),
	))
}

// Float32sReader is a interface that allows reading a sequence of values of fixed length.
type Float32sReader interface {
	Len() (n uint64, err error)
	ReadFloat32s(val []float32) (err error)
}

// GetFloat32s reads the entire data in r and returns it.
func GetFloat32s(r Float32sReader) (data []float32, err error) {
	n, err := r.Len()
	if err != nil {
		return
	}
	data = make([]float32, n)
	err = r.ReadFloat32s(data)
	return
}

// testReadFloat32s writes somes data to v. N is v.Len().
// This function is only used for testing.
func testWriteFloat32s(v Var, n uint64) error {
	data := make([]float32, n)
	for i := 0; i < int(n); i++ {
		data[i] = float32(i + 10)
	}
	return v.WriteFloat32s(data)
}

// testReadFloat32s reads data from v and checks that it's the same as what
// was written by testWriteDouble. N is v.Len().
// This function is only used for testing.
func testReadFloat32s(v Var, n uint64) error {
	data := make([]float32, n)
	if err := v.ReadFloat32s(data); err != nil {
		return err
	}
	for i := 0; i < int(n); i++ {
		if val := float32(i + 10); data[i] != val {
			return fmt.Errorf("data at position %d is %v; expected %v", i, data[i], val)
		}
	}
	return nil
}

// testWriteFloat32Slice writes somes data to v. N is v.LenDim().
// This function is only used for testing.
func testWriteFloat32Slice(v Var, n []uint64) error {
	if len(n) == 0 {
		return nil // Don't test empty data.
	}
	start, count := make([]uint64, len(n)), make([]uint64, len(n))
	for i, v := range n {
		start[i] = v / 2
		count[i] = v / 2
	}
	data := make([]float32, product(count))
	for i := 0; i < int(product(count)); i++ {
		data[i] = float32(i + 10)
	}
	return v.WriteFloat32Slice(data, start, count)
}

// testReadFloat32Slice reads data from v and checks that it's the same as what
// was written by testWriteDouble. N is v.LenDim().
// This function is only used for testing.
func testReadFloat32Slice(v Var, n []uint64) error {
	if len(n) == 0 {
		return nil // Don't test empty data.
	}
	start, count := make([]uint64, len(n)), make([]uint64, len(n))
	for i, v := range n {
		start[i] = v / 2
		count[i] = v / 2
	}
	data := make([]float32, product(count))
	if err := v.ReadFloat32Slice(data, start, count); err != nil {
		return err
	}
	for i := 0; i < int(product(count)); i++ {
		if val := float32(i + 10); data[i] != val {
			return fmt.Errorf("strided slice data at position %d is %v; expected %v", i, data[i], val)
		}
	}
	return nil
}

// testWriteFloat32StridedSlice writes somes data to v. N is v.LenDim().
// This function is only used for testing.
func testWriteFloat32StridedSlice(v Var, n []uint64) error {
	if len(n) == 0 {
		return nil // Don't test empty data.
	}
	start, count, stride := make([]uint64, len(n)), make([]uint64, len(n)), make([]int64, len(n))
	for i, v := range n {
		start[i] = 1
		count[i] = (v - 1) / 2
		stride[i] = 2
	}
	data := make([]float32, product(count))
	for i := 0; i < int(product(count)); i++ {
		data[i] = float32(i + 10)
	}
	return v.WriteFloat32StridedSlice(data, start, count, stride)
}

// testReadFloat32StridedSlice reads data from v and checks that it's the same as what
// was written by testWriteDouble. N is v.LenDim().
// This function is only used for testing.
func testReadFloat32StridedSlice(v Var, n []uint64) error {
	if len(n) == 0 {
		return nil // Don't test empty data.
	}
	start, count, stride := make([]uint64, len(n)), make([]uint64, len(n)), make([]int64, len(n))
	for i, v := range n {
		start[i] = 1
		count[i] = (v - 1) / 2
		stride[i] = 2
	}
	data := make([]float32, product(count))
	if err := v.ReadFloat32StridedSlice(data, start, count, stride); err != nil {
		return err
	}
	for i := 0; i < int(product(count)); i++ {
		if val := float32(i + 10); data[i] != val {
			return fmt.Errorf("strided slice data at position %d is %v; expected %v", i, data[i], val)
		}
	}
	return nil
}

func testReadFloat32At(v Var, n uint64) error {
	data := make([]float32, n)
	if err := v.ReadFloat32s(data); err != nil {
		return err
	}
	for i := 0; i < int(n); i++ {
		shape, _ := v.LenDims()
		coords, _ := UnravelIndex(uint64(i), shape)
		expected := data[i]
		val, _ := v.ReadFloat32At(coords)
		if val != expected {
			return fmt.Errorf("data at position %v is %v; expected %v", i, val, expected)
		}
	}
	return nil
}

func testWriteFloat32At(v Var, n uint64) error {
	shape, _ := v.LenDims()
	ndim := len(shape)
	coord := make([]uint64, ndim)
	for i := 0; i < ndim; i++ {
		for k := 0; k < ndim; k++ {
			coord[k] = uint64(i)
		}
		v.WriteFloat32At(coord, float32(i))
	}
	for i := 0; i < ndim; i++ {
		for k := 0; k < ndim; k++ {
			coord[k] = uint64(i)
		}
		val, _ := v.ReadFloat32At(coord)
		if val != float32(i) {
			return fmt.Errorf("data at position %v is %v; expected %v", coord, val, int(i))
		}
	}
	return nil
}
